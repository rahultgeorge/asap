; ModuleID = 'sum.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = internal unnamed_addr constant { [35 x i8], [61 x i8] } { [35 x i8] c"How many numbers should I sum up? \00", [61 x i8] zeroinitializer }, align 32
@.str.1 = internal unnamed_addr constant { [3 x i8], [61 x i8] } { [3 x i8] c"%d\00", [61 x i8] zeroinitializer }, align 32
@.str.2 = internal unnamed_addr constant { [9 x i8], [55 x i8] } { [9 x i8] c"sum >= 0\00", [55 x i8] zeroinitializer }, align 32
@.str.3 = internal unnamed_addr constant { [6 x i8], [58 x i8] } { [6 x i8] c"sum.c\00", [58 x i8] zeroinitializer }, align 32
@__PRETTY_FUNCTION__.main = internal unnamed_addr constant { [11 x i8], [53 x i8] } { [11 x i8] c"int main()\00", [53 x i8] zeroinitializer }, align 32
@.str.4 = internal unnamed_addr constant { [16 x i8], [48 x i8] } { [16 x i8] c"The sum is: %d\0A\00", [48 x i8] zeroinitializer }, align 32
@llvm.global_ctors = appending global [1 x { i32, void ()* }] [{ i32, void ()* } { i32 1, void ()* @asan.module_ctor }]
@__asan_option_detect_stack_use_after_return = external global i32
@__asan_gen_ = private unnamed_addr constant [31 x i8] c"2 32 400 1 a 496 4 9 n_numbers\00", align 1
@__asan_gen_.5 = private constant [6 x i8] c"sum.c\00", align 1
@__asan_gen_.6 = private unnamed_addr constant [17 x i8] c"<string literal>\00", align 1
@__asan_gen_.7 = private unnamed_addr constant [6 x i8] c"sum.c\00", align 1
@__asan_gen_.8 = private unnamed_addr constant { [6 x i8]*, i32, i32 } { [6 x i8]* @__asan_gen_.7, i32 13, i32 12 }
@__asan_gen_.9 = private unnamed_addr constant [17 x i8] c"<string literal>\00", align 1
@__asan_gen_.10 = private unnamed_addr constant [6 x i8] c"sum.c\00", align 1
@__asan_gen_.11 = private unnamed_addr constant { [6 x i8]*, i32, i32 } { [6 x i8]* @__asan_gen_.10, i32 14, i32 11 }
@__asan_gen_.12 = private unnamed_addr constant [17 x i8] c"<string literal>\00", align 1
@__asan_gen_.13 = private unnamed_addr constant [6 x i8] c"sum.c\00", align 1
@__asan_gen_.14 = private unnamed_addr constant { [6 x i8]*, i32, i32 } { [6 x i8]* @__asan_gen_.13, i32 21, i32 5 }
@__asan_gen_.15 = private unnamed_addr constant [17 x i8] c"<string literal>\00", align 1
@__asan_gen_.16 = private unnamed_addr constant [6 x i8] c"sum.c\00", align 1
@__asan_gen_.17 = private unnamed_addr constant { [6 x i8]*, i32, i32 } { [6 x i8]* @__asan_gen_.16, i32 21, i32 5 }
@__asan_gen_.18 = private unnamed_addr constant [17 x i8] c"<string literal>\00", align 1
@__asan_gen_.19 = private unnamed_addr constant [6 x i8] c"sum.c\00", align 1
@__asan_gen_.20 = private unnamed_addr constant { [6 x i8]*, i32, i32 } { [6 x i8]* @__asan_gen_.19, i32 21, i32 5 }
@__asan_gen_.21 = private unnamed_addr constant [17 x i8] c"<string literal>\00", align 1
@__asan_gen_.22 = private unnamed_addr constant [6 x i8] c"sum.c\00", align 1
@__asan_gen_.23 = private unnamed_addr constant { [6 x i8]*, i32, i32 } { [6 x i8]* @__asan_gen_.22, i32 22, i32 12 }
@0 = internal global [6 x { i64, i64, i64, i64, i64, i64, i64 }] [{ i64, i64, i64, i64, i64, i64, i64 } { i64 ptrtoint ({ [35 x i8], [61 x i8] }* @.str to i64), i64 35, i64 96, i64 ptrtoint ([17 x i8]* @__asan_gen_.6 to i64), i64 ptrtoint ([6 x i8]* @__asan_gen_.5 to i64), i64 0, i64 ptrtoint ({ [6 x i8]*, i32, i32 }* @__asan_gen_.8 to i64) }, { i64, i64, i64, i64, i64, i64, i64 } { i64 ptrtoint ({ [3 x i8], [61 x i8] }* @.str.1 to i64), i64 3, i64 64, i64 ptrtoint ([17 x i8]* @__asan_gen_.9 to i64), i64 ptrtoint ([6 x i8]* @__asan_gen_.5 to i64), i64 0, i64 ptrtoint ({ [6 x i8]*, i32, i32 }* @__asan_gen_.11 to i64) }, { i64, i64, i64, i64, i64, i64, i64 } { i64 ptrtoint ({ [9 x i8], [55 x i8] }* @.str.2 to i64), i64 9, i64 64, i64 ptrtoint ([17 x i8]* @__asan_gen_.12 to i64), i64 ptrtoint ([6 x i8]* @__asan_gen_.5 to i64), i64 0, i64 ptrtoint ({ [6 x i8]*, i32, i32 }* @__asan_gen_.14 to i64) }, { i64, i64, i64, i64, i64, i64, i64 } { i64 ptrtoint ({ [6 x i8], [58 x i8] }* @.str.3 to i64), i64 6, i64 64, i64 ptrtoint ([17 x i8]* @__asan_gen_.15 to i64), i64 ptrtoint ([6 x i8]* @__asan_gen_.5 to i64), i64 0, i64 ptrtoint ({ [6 x i8]*, i32, i32 }* @__asan_gen_.17 to i64) }, { i64, i64, i64, i64, i64, i64, i64 } { i64 ptrtoint ({ [11 x i8], [53 x i8] }* @__PRETTY_FUNCTION__.main to i64), i64 11, i64 64, i64 ptrtoint ([17 x i8]* @__asan_gen_.18 to i64), i64 ptrtoint ([6 x i8]* @__asan_gen_.5 to i64), i64 0, i64 ptrtoint ({ [6 x i8]*, i32, i32 }* @__asan_gen_.20 to i64) }, { i64, i64, i64, i64, i64, i64, i64 } { i64 ptrtoint ({ [16 x i8], [48 x i8] }* @.str.4 to i64), i64 16, i64 64, i64 ptrtoint ([17 x i8]* @__asan_gen_.21 to i64), i64 ptrtoint ([6 x i8]* @__asan_gen_.5 to i64), i64 0, i64 ptrtoint ({ [6 x i8]*, i32, i32 }* @__asan_gen_.23 to i64) }]
@llvm.global_dtors = appending global [1 x { i32, void ()* }] [{ i32, void ()* } { i32 1, void ()* @asan.module_dtor }]

; Function Attrs: nounwind sanitize_address uwtable
define i32 @main() #0 {
entry:
  %0 = load i32, i32* @__asan_option_detect_stack_use_after_return, !dbg !34
  %1 = icmp ne i32 %0, 0, !dbg !34
  br i1 %1, label %2, label %4

; <label>:2                                       ; preds = %entry
  %3 = call i64 @__asan_stack_malloc_3(i64 512), !dbg !34
  br label %4

; <label>:4                                       ; preds = %entry, %2
  %5 = phi i64 [ 0, %entry ], [ %3, %2 ], !dbg !34
  %6 = icmp eq i64 %5, 0, !dbg !34
  br i1 %6, label %7, label %9

; <label>:7                                       ; preds = %4
  %MyAlloca = alloca i8, i64 512, align 32, !dbg !34
  %8 = ptrtoint i8* %MyAlloca to i64, !dbg !34
  br label %9

; <label>:9                                       ; preds = %4, %7
  %10 = phi i64 [ %5, %4 ], [ %8, %7 ], !dbg !34
  %11 = add i64 %10, 32, !dbg !34
  %12 = inttoptr i64 %11 to [100 x i32]*, !dbg !34
  %13 = add i64 %10, 496, !dbg !34
  %14 = inttoptr i64 %13 to i32*, !dbg !34
  %15 = inttoptr i64 %10 to i64*, !dbg !34
  store i64 1102416563, i64* %15, !dbg !34
  %16 = add i64 %10, 8, !dbg !34
  %17 = inttoptr i64 %16 to i64*, !dbg !34
  store i64 ptrtoint ([31 x i8]* @__asan_gen_ to i64), i64* %17, !dbg !34
  %18 = add i64 %10, 16, !dbg !34
  %19 = inttoptr i64 %18 to i64*, !dbg !34
  store i64 ptrtoint (i32 ()* @main to i64), i64* %19, !dbg !34
  %20 = lshr i64 %10, 3, !dbg !34
  %21 = add i64 %20, 2147450880, !dbg !34
  %22 = add i64 %21, 0, !dbg !34
  %23 = inttoptr i64 %22 to i64*, !dbg !34
  store i64 4059165169, i64* %23, !dbg !34
  %24 = add i64 %21, 48, !dbg !34
  %25 = inttoptr i64 %24 to i64*, !dbg !34
  store i64 -940689372167012352, i64* %25, !dbg !34
  %26 = add i64 %21, 56, !dbg !34
  %27 = inttoptr i64 %26 to i64*, !dbg !34
  store i64 -935355697314204942, i64* %27, !dbg !34
  tail call void @llvm.dbg.value(metadata i32 100, i64 0, metadata !9, metadata !35), !dbg !36
  %28 = bitcast [100 x i32]* %12 to i8*, !dbg !37
  call void @llvm.lifetime.start(i64 400, i8* %28) #1, !dbg !37
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !15, metadata !35), !dbg !38
  call void @llvm.dbg.declare(metadata [100 x i32]* %12, metadata !11, metadata !39), !dbg !40
  br label %for.body, !dbg !41

for.cond.cleanup:                                 ; preds = %74
  %29 = bitcast i32* %14 to i8*, !dbg !42
  call void @llvm.lifetime.start(i64 4, i8* %29) #1, !dbg !42
  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ({ [35 x i8], [61 x i8] }, { [35 x i8], [61 x i8] }* @.str, i32 0, i32 0, i64 0)) #1, !dbg !43
  tail call void @llvm.dbg.value(metadata i32* %14, i64 0, metadata !17, metadata !35), !dbg !44
  %call1 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ({ [3 x i8], [61 x i8] }, { [3 x i8], [61 x i8] }* @.str.1, i32 0, i32 0, i64 0), i32* nonnull %14) #1, !dbg !45
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !18, metadata !35), !dbg !46
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !19, metadata !35), !dbg !47
  call void @llvm.dbg.value(metadata i32* %14, i64 0, metadata !17, metadata !35), !dbg !44
  %30 = ptrtoint i32* %14 to i64, !dbg !48
  %31 = lshr i64 %30, 3, !dbg !48
  %32 = add i64 %31, 2147450880, !dbg !48
  %33 = inttoptr i64 %32 to i8*, !dbg !48
  %34 = load i8, i8* %33, !dbg !48
  %35 = icmp ne i8 %34, 0, !dbg !48
  br i1 %35, label %36, label %42, !dbg !48, !prof !50

; <label>:36                                      ; preds = %for.cond.cleanup
  %37 = and i64 %30, 7, !dbg !48
  %38 = add i64 %37, 3, !dbg !48
  %39 = trunc i64 %38 to i8, !dbg !48
  %40 = icmp sge i8 %39, %34, !dbg !48
  br i1 %40, label %41, label %42, !dbg !48

; <label>:41                                      ; preds = %36
  call void @__asan_report_load4(i64 %30), !dbg !48
  call void asm sideeffect "", ""()
  unreachable

; <label>:42                                      ; preds = %36, %for.cond.cleanup
  %43 = load i32, i32* %14, align 4, !dbg !48, !tbaa !51
  %cmp4.27 = icmp sgt i32 %43, 0, !dbg !55
  br i1 %cmp4.27, label %for.body.6.lr.ph, label %cond.end, !dbg !56

for.body.6.lr.ph:                                 ; preds = %42
  %44 = ptrtoint i32* %14 to i64, !dbg !48
  %45 = lshr i64 %44, 3, !dbg !48
  %46 = add i64 %45, 2147450880, !dbg !48
  %47 = inttoptr i64 %46 to i8*, !dbg !48
  %48 = load i8, i8* %47, !dbg !48
  %49 = icmp ne i8 %48, 0, !dbg !48
  br i1 %49, label %50, label %56, !dbg !48, !prof !50

; <label>:50                                      ; preds = %for.body.6.lr.ph
  %51 = and i64 %44, 7, !dbg !48
  %52 = add i64 %51, 3, !dbg !48
  %53 = trunc i64 %52 to i8, !dbg !48
  %54 = icmp sge i8 %53, %48, !dbg !48
  br i1 %54, label %55, label %56, !dbg !48

; <label>:55                                      ; preds = %50
  call void @__asan_report_load4(i64 %44), !dbg !48
  call void asm sideeffect "", ""()
  unreachable

; <label>:56                                      ; preds = %50, %for.body.6.lr.ph
  %57 = load i32, i32* %14, align 4, !dbg !48, !tbaa !51
  %58 = sext i32 %57 to i64, !dbg !56
  br label %for.body.6, !dbg !56

for.body:                                         ; preds = %74, %9
  %indvars.iv31 = phi i64 [ 0, %9 ], [ %indvars.iv.next32, %74 ]
  %59 = mul nsw i64 %indvars.iv31, %indvars.iv31, !dbg !57
  %60 = add nuw nsw i64 %59, 4, !dbg !60
  %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* %12, i64 0, i64 %indvars.iv31, !dbg !61
  %61 = trunc i64 %60 to i32, !dbg !62
  %62 = ptrtoint i32* %arrayidx to i64, !dbg !62
  %63 = lshr i64 %62, 3, !dbg !62
  %64 = add i64 %63, 2147450880, !dbg !62
  %65 = inttoptr i64 %64 to i8*, !dbg !62
  %66 = load i8, i8* %65, !dbg !62
  %67 = icmp ne i8 %66, 0, !dbg !62
  br i1 %67, label %68, label %74, !dbg !62, !prof !50

; <label>:68                                      ; preds = %for.body
  %69 = and i64 %62, 7, !dbg !62
  %70 = add i64 %69, 3, !dbg !62
  %71 = trunc i64 %70 to i8, !dbg !62
  %72 = icmp sge i8 %71, %66, !dbg !62
  br i1 %72, label %73, label %74, !dbg !62

; <label>:73                                      ; preds = %68
  call void @__asan_report_store4(i64 %62), !dbg !62
  call void asm sideeffect "", ""()
  unreachable

; <label>:74                                      ; preds = %68, %for.body
  store i32 %61, i32* %arrayidx, align 4, !dbg !62, !tbaa !51
  %indvars.iv.next32 = add nuw nsw i64 %indvars.iv31, 1, !dbg !41
  %exitcond = icmp eq i64 %indvars.iv.next32, 100, !dbg !41
  br i1 %exitcond, label %for.cond.cleanup, label %for.body, !dbg !41

for.cond.cleanup.5:                               ; preds = %87
  %cmp13 = icmp sgt i32 %add9, -1, !dbg !63
  br i1 %cmp13, label %cond.end, label %cond.false, !dbg !63

for.body.6:                                       ; preds = %56, %87
  %indvars.iv = phi i64 [ 0, %56 ], [ %indvars.iv.next, %87 ]
  %sum.028 = phi i32 [ 0, %56 ], [ %add9, %87 ]
  %arrayidx8 = getelementptr inbounds [100 x i32], [100 x i32]* %12, i64 0, i64 %indvars.iv, !dbg !64
  %75 = ptrtoint i32* %arrayidx8 to i64, !dbg !64
  %76 = lshr i64 %75, 3, !dbg !64
  %77 = add i64 %76, 2147450880, !dbg !64
  %78 = inttoptr i64 %77 to i8*, !dbg !64
  %79 = load i8, i8* %78, !dbg !64
  %80 = icmp ne i8 %79, 0, !dbg !64
  br i1 %80, label %81, label %87, !dbg !64, !prof !50

; <label>:81                                      ; preds = %for.body.6
  %82 = and i64 %75, 7, !dbg !64
  %83 = add i64 %82, 3, !dbg !64
  %84 = trunc i64 %83 to i8, !dbg !64
  %85 = icmp sge i8 %84, %79, !dbg !64
  br i1 %85, label %86, label %87, !dbg !64

; <label>:86                                      ; preds = %81
  call void @__asan_report_load4(i64 %75), !dbg !64
  call void asm sideeffect "", ""()
  unreachable

; <label>:87                                      ; preds = %81, %for.body.6
  %88 = load i32, i32* %arrayidx8, align 4, !dbg !64, !tbaa !51
  %add9 = add nsw i32 %88, %sum.028, !dbg !66
  call void @llvm.dbg.value(metadata i32 %add9, i64 0, metadata !18, metadata !35), !dbg !46
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !56
  call void @llvm.dbg.value(metadata i32* %14, i64 0, metadata !17, metadata !35), !dbg !44
  %cmp4 = icmp slt i64 %indvars.iv.next, %58, !dbg !55
  br i1 %cmp4, label %for.body.6, label %for.cond.cleanup.5, !dbg !56

cond.false:                                       ; preds = %for.cond.cleanup.5
  call void @__asan_handle_no_return(), !dbg !67
  call void @__assert_fail(i8* getelementptr inbounds ({ [9 x i8], [55 x i8] }, { [9 x i8], [55 x i8] }* @.str.2, i32 0, i32 0, i64 0), i8* getelementptr inbounds ({ [6 x i8], [58 x i8] }, { [6 x i8], [58 x i8] }* @.str.3, i32 0, i32 0, i64 0), i32 21, i8* getelementptr inbounds ({ [11 x i8], [53 x i8] }, { [11 x i8], [53 x i8] }* @__PRETTY_FUNCTION__.main, i32 0, i32 0, i64 0)) #5, !dbg !67
  unreachable, !dbg !67

cond.end:                                         ; preds = %42, %for.cond.cleanup.5
  %sum.0.lcssa36 = phi i32 [ %add9, %for.cond.cleanup.5 ], [ 0, %42 ]
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ({ [16 x i8], [48 x i8] }, { [16 x i8], [48 x i8] }* @.str.4, i32 0, i32 0, i64 0), i32 %sum.0.lcssa36) #1, !dbg !69
  call void @llvm.lifetime.end(i64 4, i8* %29) #1, !dbg !70
  call void @llvm.lifetime.end(i64 400, i8* %28) #1, !dbg !70
  store i64 1172321806, i64* %15, !dbg !71
  %89 = icmp ne i64 %5, 0, !dbg !71
  br i1 %89, label %90, label %111, !dbg !71

; <label>:90                                      ; preds = %cond.end
  %91 = add i64 %21, 0, !dbg !71
  %92 = inttoptr i64 %91 to i64*, !dbg !71
  store i64 -723401728380766731, i64* %92, !dbg !71
  %93 = add i64 %21, 8, !dbg !71
  %94 = inttoptr i64 %93 to i64*, !dbg !71
  store i64 -723401728380766731, i64* %94, !dbg !71
  %95 = add i64 %21, 16, !dbg !71
  %96 = inttoptr i64 %95 to i64*, !dbg !71
  store i64 -723401728380766731, i64* %96, !dbg !71
  %97 = add i64 %21, 24, !dbg !71
  %98 = inttoptr i64 %97 to i64*, !dbg !71
  store i64 -723401728380766731, i64* %98, !dbg !71
  %99 = add i64 %21, 32, !dbg !71
  %100 = inttoptr i64 %99 to i64*, !dbg !71
  store i64 -723401728380766731, i64* %100, !dbg !71
  %101 = add i64 %21, 40, !dbg !71
  %102 = inttoptr i64 %101 to i64*, !dbg !71
  store i64 -723401728380766731, i64* %102, !dbg !71
  %103 = add i64 %21, 48, !dbg !71
  %104 = inttoptr i64 %103 to i64*, !dbg !71
  store i64 -723401728380766731, i64* %104, !dbg !71
  %105 = add i64 %21, 56, !dbg !71
  %106 = inttoptr i64 %105 to i64*, !dbg !71
  store i64 -723401728380766731, i64* %106, !dbg !71
  %107 = add i64 %5, 504, !dbg !71
  %108 = inttoptr i64 %107 to i64*, !dbg !71
  %109 = load i64, i64* %108, !dbg !71
  %110 = inttoptr i64 %109 to i8*, !dbg !71
  store i8 0, i8* %110, !dbg !71
  br label %118, !dbg !71

; <label>:111                                     ; preds = %cond.end
  %112 = add i64 %21, 0, !dbg !71
  %113 = inttoptr i64 %112 to i64*, !dbg !71
  store i64 0, i64* %113, !dbg !71
  %114 = add i64 %21, 48, !dbg !71
  %115 = inttoptr i64 %114 to i64*, !dbg !71
  store i64 0, i64* %115, !dbg !71
  %116 = add i64 %21, 56, !dbg !71
  %117 = inttoptr i64 %116 to i64*, !dbg !71
  store i64 0, i64* %117, !dbg !71
  br label %118, !dbg !71

; <label>:118                                     ; preds = %111, %90
  ret i32 0, !dbg !71
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #3

; Function Attrs: nounwind
declare i32 @__isoc99_scanf(i8* nocapture readonly, ...) #3

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #4

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #2

define internal void @asan.module_ctor() {
  tail call void @__asan_init_v5()
  call void @__asan_register_globals(i64 ptrtoint ([6 x { i64, i64, i64, i64, i64, i64, i64 }]* @0 to i64), i64 6)
  ret void
}

declare void @__asan_init_v5()

declare void @__asan_report_load_n(i64, i64)

declare void @__asan_loadN(i64, i64)

declare void @__asan_report_load1(i64)

declare void @__asan_load1(i64)

declare void @__asan_report_load2(i64)

declare void @__asan_load2(i64)

declare void @__asan_report_load4(i64)

declare void @__asan_load4(i64)

declare void @__asan_report_load8(i64)

declare void @__asan_load8(i64)

declare void @__asan_report_load16(i64)

declare void @__asan_load16(i64)

declare void @__asan_report_store_n(i64, i64)

declare void @__asan_storeN(i64, i64)

declare void @__asan_report_store1(i64)

declare void @__asan_store1(i64)

declare void @__asan_report_store2(i64)

declare void @__asan_store2(i64)

declare void @__asan_report_store4(i64)

declare void @__asan_store4(i64)

declare void @__asan_report_store8(i64)

declare void @__asan_store8(i64)

declare void @__asan_report_store16(i64)

declare void @__asan_store16(i64)

declare void @__asan_report_exp_load_n(i64, i64, i32)

declare void @__asan_exp_loadN(i64, i64, i32)

declare void @__asan_report_exp_load1(i64, i32)

declare void @__asan_exp_load1(i64, i32)

declare void @__asan_report_exp_load2(i64, i32)

declare void @__asan_exp_load2(i64, i32)

declare void @__asan_report_exp_load4(i64, i32)

declare void @__asan_exp_load4(i64, i32)

declare void @__asan_report_exp_load8(i64, i32)

declare void @__asan_exp_load8(i64, i32)

declare void @__asan_report_exp_load16(i64, i32)

declare void @__asan_exp_load16(i64, i32)

declare void @__asan_report_exp_store_n(i64, i64, i32)

declare void @__asan_exp_storeN(i64, i64, i32)

declare void @__asan_report_exp_store1(i64, i32)

declare void @__asan_exp_store1(i64, i32)

declare void @__asan_report_exp_store2(i64, i32)

declare void @__asan_exp_store2(i64, i32)

declare void @__asan_report_exp_store4(i64, i32)

declare void @__asan_exp_store4(i64, i32)

declare void @__asan_report_exp_store8(i64, i32)

declare void @__asan_exp_store8(i64, i32)

declare void @__asan_report_exp_store16(i64, i32)

declare void @__asan_exp_store16(i64, i32)

declare i8* @__asan_memmove(i8*, i8*, i64)

declare i8* @__asan_memcpy(i8*, i8*, i64)

declare i8* @__asan_memset(i8*, i32, i64)

declare void @__asan_handle_no_return()

declare void @__sanitizer_ptr_cmp(i64, i64)

declare void @__sanitizer_ptr_sub(i64, i64)

declare i64 @__asan_stack_malloc_0(i64)

declare void @__asan_stack_free_0(i64, i64)

declare i64 @__asan_stack_malloc_1(i64)

declare void @__asan_stack_free_1(i64, i64)

declare i64 @__asan_stack_malloc_2(i64)

declare void @__asan_stack_free_2(i64, i64)

declare i64 @__asan_stack_malloc_3(i64)

declare void @__asan_stack_free_3(i64, i64)

declare i64 @__asan_stack_malloc_4(i64)

declare void @__asan_stack_free_4(i64, i64)

declare i64 @__asan_stack_malloc_5(i64)

declare void @__asan_stack_free_5(i64, i64)

declare i64 @__asan_stack_malloc_6(i64)

declare void @__asan_stack_free_6(i64, i64)

declare i64 @__asan_stack_malloc_7(i64)

declare void @__asan_stack_free_7(i64, i64)

declare i64 @__asan_stack_malloc_8(i64)

declare void @__asan_stack_free_8(i64, i64)

declare i64 @__asan_stack_malloc_9(i64)

declare void @__asan_stack_free_9(i64, i64)

declare i64 @__asan_stack_malloc_10(i64)

declare void @__asan_stack_free_10(i64, i64)

declare void @__asan_poison_stack_memory(i64, i64)

declare void @__asan_unpoison_stack_memory(i64, i64)

declare void @__asan_alloca_poison(i64, i64)

declare void @__asan_allocas_unpoison(i64, i64)

declare void @__asan_before_dynamic_init(i64)

declare void @__asan_after_dynamic_init()

declare void @__asan_register_globals(i64, i64)

declare void @__asan_unregister_globals(i64, i64)

define internal void @asan.module_dtor() {
  call void @__asan_unregister_globals(i64 ptrtoint ([6 x { i64, i64, i64, i64, i64, i64, i64 }]* @0 to i64), i64 6)
  ret void
}

attributes #0 = { nounwind sanitize_address uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.asan.globals = !{!21, !23, !25, !27, !28, !29}
!llvm.module.flags = !{!31, !32}
!llvm.ident = !{!33}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (https://github.com/llvm-mirror/clang 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (https://github.com/rahultgeorge/asap.git c6362747746d9299de10402dfc042c6af32e85a1)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "sum.c", directory: "/home/rahultgeorge/Desktop/asap/asap/doc/sum")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "main", scope: !1, file: !1, line: 4, type: !5, isLocal: false, isDefinition: true, scopeLine: 4, isOptimized: true, function: i32 ()* @main, variables: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{!7}
!7 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!8 = !{!9, !11, !15, !17, !18, !19}
!9 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "MAX_SIZE", scope: !4, file: !1, line: 5, type: !10)
!10 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!11 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !4, file: !1, line: 6, type: !12)
!12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 3200, align: 32, elements: !13)
!13 = !{!14}
!14 = !DISubrange(count: 100)
!15 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !16, file: !1, line: 8, type: !7)
!16 = distinct !DILexicalBlock(scope: !4, file: !1, line: 8, column: 5)
!17 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n_numbers", scope: !4, file: !1, line: 12, type: !7)
!18 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sum", scope: !4, file: !1, line: 16, type: !7)
!19 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !20, file: !1, line: 17, type: !7)
!20 = distinct !DILexicalBlock(scope: !4, file: !1, line: 17, column: 5)
!21 = !{[35 x i8]* getelementptr inbounds ({ [35 x i8], [61 x i8] }, { [35 x i8], [61 x i8] }* @.str, i32 0, i32 0), !22, !"<string literal>", i1 false, i1 false}
!22 = !{!"sum.c", i32 13, i32 12}
!23 = !{[3 x i8]* getelementptr inbounds ({ [3 x i8], [61 x i8] }, { [3 x i8], [61 x i8] }* @.str.1, i32 0, i32 0), !24, !"<string literal>", i1 false, i1 false}
!24 = !{!"sum.c", i32 14, i32 11}
!25 = !{[9 x i8]* getelementptr inbounds ({ [9 x i8], [55 x i8] }, { [9 x i8], [55 x i8] }* @.str.2, i32 0, i32 0), !26, !"<string literal>", i1 false, i1 false}
!26 = !{!"sum.c", i32 21, i32 5}
!27 = !{[6 x i8]* getelementptr inbounds ({ [6 x i8], [58 x i8] }, { [6 x i8], [58 x i8] }* @.str.3, i32 0, i32 0), !26, !"<string literal>", i1 false, i1 false}
!28 = !{[11 x i8]* getelementptr inbounds ({ [11 x i8], [53 x i8] }, { [11 x i8], [53 x i8] }* @__PRETTY_FUNCTION__.main, i32 0, i32 0), !26, !"<string literal>", i1 false, i1 false}
!29 = !{[16 x i8]* getelementptr inbounds ({ [16 x i8], [48 x i8] }, { [16 x i8], [48 x i8] }* @.str.4, i32 0, i32 0), !30, !"<string literal>", i1 false, i1 false}
!30 = !{!"sum.c", i32 22, i32 12}
!31 = !{i32 2, !"Dwarf Version", i32 4}
!32 = !{i32 2, !"Debug Info Version", i32 3}
!33 = !{!"clang version 3.7.0 (https://github.com/llvm-mirror/clang 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (https://github.com/rahultgeorge/asap.git c6362747746d9299de10402dfc042c6af32e85a1)"}
!34 = !DILocation(line: 4, scope: !4)
!35 = !DIExpression()
!36 = !DILocation(line: 5, column: 15, scope: !4)
!37 = !DILocation(line: 6, column: 5, scope: !4)
!38 = !DILocation(line: 8, column: 14, scope: !16)
!39 = !DIExpression(DW_OP_deref)
!40 = !DILocation(line: 6, column: 9, scope: !4)
!41 = !DILocation(line: 8, column: 5, scope: !16)
!42 = !DILocation(line: 12, column: 5, scope: !4)
!43 = !DILocation(line: 13, column: 5, scope: !4)
!44 = !DILocation(line: 12, column: 9, scope: !4)
!45 = !DILocation(line: 14, column: 5, scope: !4)
!46 = !DILocation(line: 16, column: 9, scope: !4)
!47 = !DILocation(line: 17, column: 14, scope: !20)
!48 = !DILocation(line: 17, column: 25, scope: !49)
!49 = distinct !DILexicalBlock(scope: !20, file: !1, line: 17, column: 5)
!50 = !{!"branch_weights", i32 1, i32 100000}
!51 = !{!52, !52, i64 0}
!52 = !{!"int", !53, i64 0}
!53 = !{!"omnipotent char", !54, i64 0}
!54 = !{!"Simple C/C++ TBAA"}
!55 = !DILocation(line: 17, column: 23, scope: !49)
!56 = !DILocation(line: 17, column: 5, scope: !20)
!57 = !DILocation(line: 9, column: 18, scope: !58)
!58 = distinct !DILexicalBlock(scope: !59, file: !1, line: 8, column: 40)
!59 = distinct !DILexicalBlock(scope: !16, file: !1, line: 8, column: 5)
!60 = !DILocation(line: 9, column: 22, scope: !58)
!61 = !DILocation(line: 9, column: 9, scope: !58)
!62 = !DILocation(line: 9, column: 14, scope: !58)
!63 = !DILocation(line: 21, column: 5, scope: !4)
!64 = !DILocation(line: 18, column: 16, scope: !65)
!65 = distinct !DILexicalBlock(scope: !49, file: !1, line: 17, column: 41)
!66 = !DILocation(line: 18, column: 13, scope: !65)
!67 = !DILocation(line: 21, column: 5, scope: !68)
!68 = !DILexicalBlockFile(scope: !4, file: !1, discriminator: 2)
!69 = !DILocation(line: 22, column: 5, scope: !4)
!70 = !DILocation(line: 24, column: 1, scope: !4)
!71 = !DILocation(line: 23, column: 5, scope: !4)
